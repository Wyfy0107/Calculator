{"version":3,"sources":["Components/Display.tsx","Components/Button.tsx","Components/ButtonArea.tsx","Components/CalcButton.tsx","Components/DelButton.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Display","props","className","display","Button","onClick","click","content","ButtonArea","a","children","CalcButton","add","but","DelButton","del","App","state","clickInput","index","clickNum","buttonSign","slice","setState","delDisp","newDisp","length","calculation","addIndex","indexOf","subsIndex","multiIndex","divIndex","split","map","val","parseInt","reduce","b","toFixed","buttonContent","this","key","buttonRes","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0ea62af.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../CSS/Display.css\";\n\ntype props = {\n  display: any;\n};\n\nconst Display = (props: props) => {\n  return <div className='display'>{props.display}</div>;\n};\n\nexport default Display;\n","import React from \"react\";\nimport \"../CSS/Button.css\";\n\ntype buttonProps = {\n  key: number;\n  content: string;\n  click: () => void;\n  index: number;\n};\n\nconst Button = (props: buttonProps) => {\n  return (\n    <div className='button' onClick={props.click}>\n      <p>{props.content}</p>\n    </div>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport \"../CSS/ButtonArea.css\";\n\ntype props = {\n  a: React.ReactNode[];\n  children: React.ReactNode;\n};\n\nconst ButtonArea = (props: props) => {\n  return (\n    <div className='button-area'>\n      {props.a}\n      {props.children}\n    </div>\n  );\n};\n\nexport default ButtonArea;\n","import React from \"react\";\nimport \"../CSS/Button.css\";\n\ntype props = {\n  add: () => void;\n  but: string;\n};\n\nconst CalcButton = (props: props) => {\n  return (\n    <div className='button' onClick={props.add}>\n      {props.but}\n    </div>\n  );\n};\n\nexport default CalcButton;\n","import React from \"react\";\nimport \"../CSS/Button.css\";\n\ntype props = {\n  del: () => void;\n  but: string;\n};\n\nconst DelButton = (props: props) => {\n  return (\n    <div className='button' onClick={props.del}>\n      {props.but}\n    </div>\n  );\n};\n\nexport default DelButton;\n","import React, { Component } from \"react\";\nimport \"./CSS/App.css\";\nimport Display from \"./Components/Display\";\nimport Button from \"./Components/Button\";\nimport ButtonArea from \"./Components/ButtonArea\";\nimport CalcButton from \"./Components/CalcButton\";\nimport DelButton from \"./Components/DelButton\";\n\ntype appState = {\n  display: any;\n};\n\ntype appProps = {\n  buttonSign: string[];\n  buttonRes: string[];\n};\n\nclass App extends Component<appProps, appState> {\n  static defaultProps: appProps = {\n    //prettier-ignore\n    buttonSign: ['1','2','3','4','5','6','7','8','9','0','+','-','*','/',],\n    buttonRes: [\"=\", \"del\"],\n  };\n\n  state: appState = {\n    display: \"\",\n  };\n\n  clickInput = (index: number) => {\n    const clickNum = this.props.buttonSign[index];\n    if (typeof this.state.display == \"string\") {\n      let display = this.state.display.slice();\n      display += clickNum;\n      this.setState({\n        display: display,\n      });\n    }\n  };\n\n  delDisp = () => {\n    if (typeof this.state.display == \"string\") {\n      let newDisp = this.state.display.slice(0, this.state.display.length - 1);\n      this.setState({\n        display: newDisp,\n      });\n    } else {\n      this.setState({\n        display: \"\",\n      });\n    }\n  };\n\n  calculation = () => {\n    let display = null;\n    const addIndex = this.state.display.indexOf(\"+\");\n    const subsIndex = this.state.display.indexOf(\"-\");\n    const multiIndex = this.state.display.indexOf(\"*\");\n    const divIndex = this.state.display.indexOf(\"/\");\n    if (addIndex !== -1) {\n      let arr = this.state.display.split(\"+\");\n      let newArr = arr.map((val: string) => parseInt(val));\n      newArr.reduce((a: number, b: number) => (display = a + b));\n      this.setState({\n        display: display,\n      });\n    } else if (subsIndex !== -1) {\n      let arr = this.state.display.split(\"-\");\n      let newArr = arr.map((val: string) => parseInt(val));\n      newArr.reduce((a: number, b: number) => (display = a - b));\n      this.setState({\n        display: display,\n      });\n    } else if (multiIndex !== -1) {\n      let arr = this.state.display.split(\"*\");\n      let newArr = arr.map((val: string) => parseInt(val));\n      newArr.reduce((a: number, b: number) => (display = a * b));\n      this.setState({\n        display: display,\n      });\n    } else if (divIndex !== -1) {\n      display = 0;\n      let arr = this.state.display.split(\"/\");\n      let newArr = arr.map((val: string) => parseInt(val));\n      newArr.reduce((a: number, b: number) => (display = a / b));\n      this.setState({\n        display: display.toFixed(2),\n      });\n    }\n  };\n\n  render() {\n    const buttonContent = this.props.buttonSign.map((val, index) => {\n      return (\n        <Button\n          key={index}\n          content={val}\n          click={() => this.clickInput(index)}\n          index={index}\n        />\n      );\n    });\n\n    return (\n      <div className='App'>\n        <h1>This is gh action</h1>\n        <Display display={this.state.display} />{\" \"}\n        <ButtonArea a={buttonContent}>\n          <CalcButton add={this.calculation} but={this.props.buttonRes[0]} />{\" \"}\n          <DelButton del={this.delDisp} but={this.props.buttonRes[1]} />{\" \"}\n        </ButtonArea>{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}