{"version":3,"sources":["Components/Display.js","Components/Button.js","Components/ButtonArea.js","Components/CalcButton.js","Components/DelButton.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","className","display","Button","onClick","click","content","ButtonArea","a","children","CalcButton","add","but","DelButton","del","App","state","clickInput","index","clickNum","buttonSign","slice","setState","delDisp","newDisp","length","calculation","addIndex","indexOf","subsIndex","multiIndex","divIndex","split","map","val","parseInt","reduce","b","toFixed","buttonContent","this","key","buttonRes","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff57b68e.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../CSS/Display.css';\r\n\r\nconst Display = (props) => {\r\n\treturn <div className='display'>{props.display}</div>;\r\n};\r\n\r\nexport default Display;\r\n","import React from 'react';\r\nimport '../CSS/Button.css';\r\n\r\nconst Button = (props) => {\r\n\treturn (\r\n\t\t<div className='button' onClick={props.click}>\r\n\t\t\t<p>{props.content}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport '../CSS/ButtonArea.css';\r\n\r\nconst ButtonArea = (props) => {\r\n\treturn (\r\n\t\t<div className='button-area'>\r\n\t\t\t{props.a}\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ButtonArea;\r\n","import React from 'react';\r\nimport '../CSS/Button.css';\r\n\r\nconst CalcButton = (props) => {\r\n\treturn (\r\n\t\t<div className='button' onClick={props.add}>\r\n\t\t\t{props.but}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CalcButton;\r\n","import React from 'react';\r\nimport '../CSS/Button.css';\r\n\r\nconst DelButton = (props) => {\r\n\treturn (\r\n\t\t<div className='button' onClick={props.del}>\r\n\t\t\t{props.but}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default DelButton;\r\n","import React, { Component } from 'react';\r\nimport './CSS/App.css';\r\nimport Display from './Components/Display';\r\nimport Button from './Components/Button';\r\nimport ButtonArea from './Components/ButtonArea';\r\nimport CalcButton from './Components/CalcButton';\r\nimport DelButton from './Components/DelButton';\r\n\r\nclass App extends Component {\r\n\tstatic defaultProps = {\r\n\t\t//prettier-ignore\r\n\t\tbuttonSign: ['1','2','3','4','5','6','7','8','9','0','+','-','*','/',],\r\n\t\tbuttonRes: ['=', 'del'],\r\n\t};\r\n\r\n\tstate = {\r\n\t\tdisplay: '',\r\n\t};\r\n\r\n\tclickInput = (index) => {\r\n\t\tconst clickNum = this.props.buttonSign[index];\r\n\t\tif (typeof this.state.display == 'string') {\r\n\t\t\tlet display = this.state.display.slice();\r\n\t\t\tdisplay += clickNum;\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplay: display,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tdelDisp = () => {\r\n\t\tif (typeof this.state.display == 'string') {\r\n\t\t\tlet newDisp = this.state.display.slice(0, this.state.display.length - 1);\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplay: newDisp,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplay: '',\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tcalculation = () => {\r\n\t\tlet display = null;\r\n\t\tconst addIndex = this.state.display.indexOf('+');\r\n\t\tconst subsIndex = this.state.display.indexOf('-');\r\n\t\tconst multiIndex = this.state.display.indexOf('*');\r\n\t\tconst divIndex = this.state.display.indexOf('/');\r\n\t\tif (addIndex !== -1) {\r\n\t\t\tlet arr = this.state.display.split('+');\r\n\t\t\tlet newArr = arr.map((val) => parseInt(val));\r\n\t\t\tnewArr.reduce((a, b) => (display = a + b));\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplay: display,\r\n\t\t\t});\r\n\t\t} else if (subsIndex !== -1) {\r\n\t\t\tlet arr = this.state.display.split('-');\r\n\t\t\tlet newArr = arr.map((val) => parseInt(val));\r\n\t\t\tnewArr.reduce((a, b) => (display = a - b));\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplay: display,\r\n\t\t\t});\r\n\t\t} else if (multiIndex !== -1) {\r\n\t\t\tlet arr = this.state.display.split('*');\r\n\t\t\tlet newArr = arr.map((val) => parseInt(val));\r\n\t\t\tnewArr.reduce((a, b) => (display = a * b));\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplay: display,\r\n\t\t\t});\r\n\t\t} else if (divIndex !== -1) {\r\n\t\t\tlet arr = this.state.display.split('/');\r\n\t\t\tlet newArr = arr.map((val) => parseInt(val));\r\n\t\t\tnewArr.reduce((a, b) => (display = a / b));\r\n\t\t\tthis.setState({\r\n\t\t\t\tdisplay: display.toFixed(2),\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst buttonContent = this.props.buttonSign.map((val, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Button\r\n\t\t\t\t\tkey={index}\r\n\t\t\t\t\tcontent={val}\r\n\t\t\t\t\tclick={() => this.clickInput(index)}\r\n\t\t\t\t\tindex={index}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div className='App'>\r\n\t\t\t\t<Display display={this.state.display} />{' '}\r\n\t\t\t\t<ButtonArea a={buttonContent}>\r\n\t\t\t\t\t<CalcButton add={this.calculation} but={this.props.buttonRes[0]} />{' '}\r\n\t\t\t\t\t<DelButton del={this.delDisp} but={this.props.buttonRes[1]} />{' '}\r\n\t\t\t\t</ButtonArea>{' '}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './CSS/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}